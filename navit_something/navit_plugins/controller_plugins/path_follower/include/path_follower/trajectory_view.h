//
// Created by yjh on 23-2-24.
//
#ifndef SRC_TRAJECTORY_VIEW_H
#define SRC_TRAJECTORY_VIEW_H
#include <ros/ros.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PolygonStamped.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include <geometry_msgs/PoseArray.h>
#include "robot_state.pb.h"
#include "config_control.pb.h"
#include "control_command.pb.h"
#include "path_follow_cfg.pb.h"
#include "path.pb.h"
#include "geometry2.h"
class TrajectoryViewer {
public:
    TrajectoryViewer() {
        Init();
    }
    void Init();
    // for local planner
    // @brief Used for smooth global path which from set plan
    void visualizePreSmoothPath(const proto::Path proto_path, const std::string frame);
    // @brief Used for collision detect box ahead of robot
//    void visualizeCollisionDetectBox();
//    // @brief Used for view local path generated by state hybrid A star
//    // @brief Used for view path
//    void visualizeSplitJointPath();
//    void visualizeFinalSmoothPath();
//
//    // for controller
    void visualizeAnchorPoint(const geometry2::Vec2f vec2f_pose, const std::string frame);
    void visualizeLocalPlanGoal(const proto::Pose goal_pose, const std::string frame);
    void visualizeAnchorBoxes(geometry_msgs::PolygonStamped emergency_box,
                              geometry_msgs::PolygonStamped cushion_box,
                              geometry_msgs::PolygonStamped replan_box,
                              const std::string frame);
    void visualizeAnchorPoses(const proto::AnchorBox& anchor_boxes,
                              const std::string frame);
    void visualizePruneGlobalPath(const proto::Path& path, const std::string frame);
    void visualizeLocalPath(nav_msgs::Path& path, const std::string frame);
    void visualizeLocalSmoothPath(const proto::Path path_proto, const std::string frame);
    void visualizeAnchorBoxes(std::vector<geometry_msgs::PolygonStamped> polygons, const std::string frame);
//    // for debug
//    void visualizePrunePath();
    private:
//    void generateAreaPolygon(const proto::RobotState &robot_state,
//                             const RobotBoxCfg& robot_box,
//                             const float cushion_x_dis,
//                             geometry_msgs::Polygon& robot_polygon);
    ros::Publisher smooth_path_pub_, emergency_bounding_box_pub_, cushion_bounding_box_pub_;
    ros::Publisher anchor_point_pub_, current_point_pub_, prune_path_pub_, carrot_arc_pub_, replan_bounding_box_pub_;
    ros::Publisher local_planner_pub_, local_smooth_path_pub_, local_plan_pub_, debug_pub_;
    ros::Publisher goal_pose_pub_, poses_lists_pub_, replan_planner_pub_, smooth_replan_planner_pub_, polygons_pub_;

}; //TrajectoryViewer
#endif //SRC_TRAJECTORY_VIEW_H
