# this variable selects the algorithm for room exploration
# 2 = boustrophedon explorator
# 8 = boustrophedon variant explorator
boustrophedon_exploration_algorithm: 2

# robot
robot_radius: 0.3
coverage_radius: 1.0


# map correction
# ==============
# Applies a closing operation to neglect inaccessible areas and map errors/artifacts if the map_correction_closing_neighborhood_size parameter is larger than 0.
# The parameter then specifies the iterations (or neighborhood size) of that closing operation.
# int
map_correction_closing_neighborhood_size: 2


# parameters specific for the boustrophedon explorator
# ====================================================
# min area a boustrophedon cell (i.e. a boustrophedon region of the map) must have to be determined for the path generation
# [pixel^2]
# double
min_cell_area: 200.0      #10.0

# distance between two points when generating the (line) path
# [pixel], where one pixel is the size of one cell in the navigation grid map
# double
path_eps: 6.0

# the additional offset of the grid to obstacles, i.e. allows to displace the grid by more than the standard half_grid_size from obstacles
# [m]
# double
grid_obstacle_offset: 0.251     #0.101        #0.251

# maximal allowed shift off the ideal boustrophedon track to both sides for avoiding obstacles on track
# setting max_deviation_from_track=grid_spacing is usually a good choice
# for negative values (e.g. max_deviation_from_track: -1) max_deviation_from_track is automatically set to grid_spacing
# [pixel]
max_deviation_from_track: 0

# cell visiting order
#   1 = the optimal visiting order of the cells is determined as TSP problem
#   2 = alternative ordering from left to right (measured on y-coordinates of the cells), visits the cells in a more obvious fashion to the human observer (though it is not optimal)
# int
cell_visiting_order: 2
