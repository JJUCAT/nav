#!/usr/bin/env python
PACKAGE = "ipa_boustrophedon_explorator"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Method to plan a path trough the room
method_enum = gen.enum([gen.const("BoustrophedonExplorator", int_t, 2, "Use the boustrophedon exploration algorithm."),
                        gen.const("BoustrophedonVariantExplorator", int_t, 8,
                                  "Use a variant of the boustrophedon exploration algorithm.")],
                       "Exploration algorithm")
gen.add("boustrophedon_exploration_algorithm", int_t, 0, "Exploration method", 2, 2, 8, edit_method=method_enum)

gen.add("robot_radius", double_t, 0, "robot radius.", 0.1, 1)
gen.add("coverage_radius", double_t, 0, "coverage radius.", 0.1, 1)

# Parameters on map correction options
# ====================================
gen.add("map_correction_closing_neighborhood_size", int_t, 0,
        "Applies a closing operation to neglect inaccessible areas and map errors/artifacts if the map_correction_closing_neighborhood_size parameter is larger than 0. The parameter then specifies the iterations (or neighborhood size) of that closing operation..",
        2, -1, 100);

# Boustrophedon Explorator
# ========================
gen.add("min_cell_area", double_t, 0, "Minimum area of one cell for the boustrophedon explorator.", 10.0, 1e-7)

# min distance between two points in the created coverage path
gen.add("path_eps", double_t, 0, "Minimal distance between two points on the generated path [pixel].", 2.0, 0)

# the additional offset of the grid to obstacles, i.e. allows to displace the grid by more than the standard half_grid_size from obstacles, in [m]
gen.add("grid_obstacle_offset", double_t, 0,
        "Allows to displace the grid by more than the standard half_grid_size from obstacles [m].", 0.0, 0)

# maximal allowed shift off the ideal boustrophedon track to both sides for avoiding obstacles on track
# setting max_deviation_from_track=grid_spacing is usually a good choice
# for negative values (e.g. max_deviation_from_track: -1) max_deviation_from_track is automatically set to grid_spacing
# in [pixel]
gen.add("max_deviation_from_track", int_t, 0,
        "Maximal allowed shift off the ideal boustrophedon track for avoiding obstacles on track, in [pixel]. For negative values max_deviation_from_track is automatically set to grid_spacing.",
        -1, -1)

# enum for cell visiting order
cell_visiting_order_enum = gen.enum(
    [gen.const("OptimalTSP", int_t, 1, "The optimal visiting order of the cells is determined as TSP problem."),
     gen.const("LeftToRight", int_t, 2,
               "Alternative ordering from left to right (measured on y-coordinates of the cells), visits the cells in a more obvious fashion to the human observer (though it is not optimal).")],
    "Cell visiting order")
gen.add("cell_visiting_order", int_t, 0, "Cell visiting order method", 1, 1, 2, edit_method=cell_visiting_order_enum)

exit(gen.generate(PACKAGE, "ipa_boustrophedon_explorator", "BoustrophedonExplorator"))
