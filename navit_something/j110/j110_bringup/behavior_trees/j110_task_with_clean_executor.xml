<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Control ID="PipelineSequence">
            <Action ID="TaskMapParserAction" task_paths="{task_paths}" task_points="{task_points}" task_polygons="{task_polygons}"/>
            <Action ID="TaskCommandAction" charge_pose_ros="{charge_pose_ros}" final_dock_distance="1.0" final_dock_pose_ros="{final_dock_pose_ros}" multi_teaching_path_ros="{multi_teaching_path_ros}" nearby_charge_pose_ros="{nearby_charge_pose_ros}" repeat_times="{repeat_times}" task_cmd="{task_cmd}" task_cmd_updated="{task_cmd_updated}" task_goal_area_id="{task_goal_area_id}" task_nums="{task_nums}" task_path="{task_path}" task_path_ros="{task_path_ros}" task_paths="{task_paths}" task_point="{task_point}" task_points="{task_points}" task_polygon="{task_polygon}" task_polygons="{task_polygons}" task_pose_ros="{task_pose_ros}" task_via_area_ids="{task_via_area_ids}" via_indexes="{via_indexes}"/>
            <Action ID="ResetValueAction" reset_value="0" task_nums="{task_nums}"/>
            <Repeat num_cycles="{repeat_times}">
                <Switch6 case_1="polygon" case_2="path" case_3="point" case_4="charge" case_5="undock" case_6="muilt_polygons" variable="{task_cmd}">
                    <SequenceStar>
                        <Action ID="PWHCoveragePlannerAction" coverage_whole_path="{coverage_whole_path}" path_updated="" plugin_name="ccpp" server_name="/polygon_coverage_path" server_timeout="0.5" task_polygon="{task_polygon}"/>
                        <Action ID="GetPathFirstPointAction" follow_path_ros="{coverage_whole_path}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{first_pose}" task_path_last_pose="{last_pose}"/>
                        <Action ID="ComputePathToPose" goal="{first_pose}" path="{go_to_first_pose}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_to_first_pose}" server_name="/follow_path" server_timeout="1.0"/>
                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{coverage_whole_path}" server_name="/follow_path" server_timeout="0.5"/>
                    </SequenceStar>
                    <Sequence>
                        <Action ID="GetPathFirstPointAction" follow_path_ros="{task_path_ros}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{first_pose}" task_path_last_pose="{last_pose}"/>
                        <Action ID="ComputePathToPose" goal="{first_pose}" path="{go_to_first_pose}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_to_first_pose}" server_name="/follow_path" server_timeout="1.0"/>
                        <Action ID="SetCleanModeAction" clean_mode="1" server_name="/switch_clean_mode" server_timeout="1.0"/>
                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{task_path_ros}" server_name="/follow_path" server_timeout="0.5"/>
                        <Action ID="SetCleanModeAction" clean_mode="3" server_name="/switch_clean_mode" server_timeout="1.0"/>
                    </Sequence>
                    <Sequence>
                        <Action ID="ComputePathToPose" goal="{task_pose_ros}" path="{global_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="0.5" start="false"/>
                        <Action ID="FollowPath" controller_id="tracking" path="{global_path}" server_name="/follow_path" server_timeout="0.5"/>
                    </Sequence>
                    <Sequence>
                        <Sequence>
                            <Action ID="ComputePathToPose" goal="{nearby_charge_pose_ros}" path="{go_charing}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="0.5" start="false"/>
                            <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_charing}" server_name="/follow_path" server_timeout="0.5"/>
                            <Delay delay_msec="2000">
                                <Action ID="ApproachDock" controller_plugin_name="FgController" dock_pose="{dock_pose}" expected_dock_pose="{charge_pose_ros}" filter_plugin_name="lkf" goal_reached="" percepted_pose_offset="3.0" perception_plugin_name="2d_lidar" server_name="/approach_dock" server_timeout="1.0"/>
                            </Delay>
                            <Action ID="ApproachDock" controller_plugin_name="FgController" dock_pose="{dock_pose}" expected_dock_pose="{charge_pose_ros}" filter_plugin_name="lkf" goal_reached="" percepted_pose_offset="3.0" perception_plugin_name="2d_lidar" server_name="/approach_dock" server_timeout="1.0"/>
                        </Sequence>
                        <Action ID="FinalDock" dock_finished="" dock_pose="{dock_pose}" rotate_in_place="false" server_name="/final_dock" server_timeout="1.0"/>
                    </Sequence>
                    <Sequence>
                        <Decorator ID="GetPositionInFrame" current_pos="{current_pos}" expand_dis="-1.0" frame_id="base_link">
                            <AlwaysSuccess/>
                        </Decorator>
                        <Action ID="FinalDock" dock_finished="" dock_pose="{current_pos}" rotate_in_place="false" server_name="/final_dock" server_timeout="1.0"/>
                    </Sequence>
                    <Sequence>
                        <Decorator ID="GetPositionInFrame" current_pos="{current_pos}" expand_dis="0.0" frame_id="map">
                            <Action ID="GetDriveableAreaId" current_area_id="{current_area_id}" current_pos="{current_pos}" multi_task_polygon="{multi_task_polygon}" task_polygons="{task_polygons}"/>
                        </Decorator>
                        <Action ID="RoutingAction" goal_area="{task_goal_area_id}" is_cross_region="{is_cross_region}" server_name="/routing" server_timeout="1.0" start_area="{current_area_id}" task_paths="{task_paths}" task_polygons="{task_polygons}" via_areas="{task_via_area_ids}" via_indexes="{via_indexes}" via_nums="{via_nums}"/>
                        <RetryUntilSuccessful num_attempts="{via_nums}">
                            <Fallback>
                                <IfThenElse>
                                    <Condition ID="IsBatteryLow" battery_topic="/battery_status" is_voltage="false" min_battery="50.0"/>
                                    <Sequence>
                                        <Sequence>
                                            <IfThenElse>
                                                <Sequence>
                                                    <Action ID="GetDriveableAreaId" current_area_id="{charing_area_id}" current_pos="{nearby_charge_pose_ros}" multi_task_polygon="{multi_task_polygon}" task_polygons="{task_polygons}"/>
                                                    <Decorator ID="GetPositionInFrame" current_pos="{current_pos}" expand_dis="0.0" frame_id="map">
                                                        <Action ID="GetDriveableAreaId" current_area_id="{current_area_id}" current_pos="{current_pos}" multi_task_polygon="{multi_task_polygon}" task_polygons="{task_polygons}"/>
                                                    </Decorator>
                                                    <Action ID="SwitchMapService" server_timeout="0.5" service_name="/navit/switch_map" switch_map_name="{current_area_id}"/>
                                                    <Delay delay_msec="2000">
                                                        <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{charing_area_id}" value_B="{current_area_id}">
                                                            <AlwaysSuccess/>
                                                        </BlackboardCheckInt>
                                                    </Delay>
                                                </Sequence>
                                                <Sequence>
                                                    <Action ID="ComputePathToPose" goal="{nearby_charge_pose_ros}" path="{go_to_nearby_charing_point_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                                    <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_to_nearby_charing_point_path}" server_name="/follow_path" server_timeout="1.0"/>
                                                </Sequence>
                                                <Sequence>
                                                    <Fallback>
                                                        <Sequence>
                                                            <Action ID="HandleViaPoints" multi_teaching_path_ros="{multi_teaching_path_ros}" task_paths="{task_paths}" task_polygons="{task_polygons}" via_indexes="{via_indexes}" via_indexes_finished="{via_indexes_finished}"/>
                                                            <Action ID="GetPathFirstPointAction" follow_path_ros="{multi_teaching_path_ros}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{task_path_first_pose}" task_path_last_pose="{task_path_last_pose}"/>
                                                            <Action ID="ComputePathToPose" goal="{task_path_first_pose}" path="{multi_global_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="falses"/>
                                                        </Sequence>
                                                        <Sequence>
                                                            <Action ID="InversePath" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" multi_teaching_path_ros="{multi_teaching_path_ros}"/>
                                                            <Action ID="GetPathFirstPointAction" follow_path_ros="{inverse_multi_teaching_path_ros}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{teaching_first_point}" task_path_last_pose="{teaching_last_point}"/>
                                                            <Action ID="ComputePathToPose" goal="{teaching_first_point}" path="{multi_global_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                                        </Sequence>
                                                    </Fallback>
                                                    <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{multi_global_path}" server_name="/follow_path" server_timeout="1.0"/>
                                                    <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{inverse_multi_teaching_path_ros}" server_name="/follow_path" server_timeout="1.0"/>
                                                    <Decorator ID="GetPositionInFrame" current_pos="{current_pos}" expand_dis="0.0" frame_id="map">
                                                        <Action ID="GetDriveableAreaId" current_area_id="{current_area_id}" current_pos="{current_pos}" multi_task_polygon="{multi_task_polygon}" task_polygons="{task_polygons}"/>
                                                    </Decorator>
                                                    <Action ID="SwitchMapService" server_timeout="0.5" service_name="/navit/switch_map" switch_map_name="{current_area_id}"/>
                                                    <Delay delay_msec="2000">
                                                        <Sequence>
                                                            <Action ID="ComputePathToPose" goal="{nearby_charge_pose_ros}" path="{go_to_nearby_charing_point_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                                            <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_to_nearby_charing_point_path}" server_name="/follow_path" server_timeout="1.0"/>
                                                        </Sequence>
                                                    </Delay>
                                                </Sequence>
                                            </IfThenElse>
                                        </Sequence>
                                        <Action ID="ApproachDock" controller_plugin_name="FgController" dock_pose="{dock_pose}" expected_dock_pose="{charge_pose_ros}" filter_plugin_name="average" goal_reached="" percepted_pose_offset="" perception_plugin_name="2d_lidar" server_name="/approach_dock" server_timeout="1.0"/>
                                        <Action ID="FinalDock" dock_finished="" dock_pose="{final_dock_pose_ros}" rotate_in_place="false" server_name="/final_dock" server_timeout="1.0"/>
                                    </Sequence>
                                    <AlwaysFailure/>
                                </IfThenElse>
                                <IfThenElse>
                                    <Action ID="HandleViaPoints" multi_teaching_path_ros="{multi_teaching_path_ros}" task_paths="{task_paths}" task_polygons="{task_polygons}" via_indexes="{via_indexes}" via_indexes_finished="{via_indexes_finished}"/>
                                    <Sequence>
                                        <Decorator ID="GetPositionInFrame" current_pos="{current_pos}" expand_dis="0.0" frame_id="map">
                                            <Action ID="GetDriveableAreaId" current_area_id="{current_area_id}" current_pos="{current_pos}" multi_task_polygon="{multi_task_polygon}" task_polygons="{task_polygons}"/>
                                        </Decorator>
                                        <Action ID="SwitchMapService" server_timeout="0.5" service_name="/navit/switch_map" switch_map_name="{current_area_id}"/>
                                        <Delay delay_msec="5000">
                                            <Action ID="PWHCoveragePlannerAction" coverage_whole_path="{multi_coverge_path}" path_updated="" plugin_name="ccpp" server_name="/polygon_coverage_path" server_timeout="1.0" task_polygon="{multi_task_polygon}"/>
                                        </Delay>
                                        <Action ID="GetPathFirstPointAction" follow_path_ros="{multi_coverge_path}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{task_path_first_pose}" task_path_last_pose="{task_path_last_pose}"/>
                                        <Action ID="ComputePathToPose" goal="{task_path_first_pose}" path="{multi_global_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{multi_global_path}" server_name="/follow_path" server_timeout="1.0"/>
                                        <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{multi_coverge_path}" server_name="/follow_path" server_timeout="1.0"/>
                                        <IfThenElse>
                                            <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{task_nums}" value_B="0">
                                                <AlwaysSuccess/>
                                            </BlackboardCheckInt>
                                            <Sequence>
                                                <Fallback>
                                                    <Sequence>
                                                        <Action ID="GetPathFirstPointAction" follow_path_ros="{multi_teaching_path_ros}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{teaching_first_point}" task_path_last_pose="{teaching_last_point}"/>
                                                        <Action ID="ComputePathToPose" goal="{teaching_first_point}" path="{go_teaching_first_point_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                                    </Sequence>
                                                    <Sequence>
                                                        <Action ID="InversePath" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" multi_teaching_path_ros="{multi_teaching_path_ros}"/>
                                                        <Action ID="GetPathFirstPointAction" follow_path_ros="{inverse_multi_teaching_path_ros}" inverse_multi_teaching_path_ros="{inverse_multi_teaching_path_ros}" task_path_first_pose="{teaching_first_point}" task_path_last_pose="{teaching_last_point}"/>
                                                        <Action ID="ComputePathToPose" goal="{teaching_first_point}" path="{go_teaching_first_point_path}" planner_id="SmallMapSmacHybrid" server_name="/compute_path" server_timeout="1.0" start="false"/>
                                                    </Sequence>
                                                </Fallback>
                                                <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{go_teaching_first_point_path}" server_name="/follow_path" server_timeout="1.0"/>
                                                <Action ID="FollowPath" controller_id="ControllerPathFollow" path="{inverse_multi_teaching_path_ros}" server_name="/follow_path" server_timeout="1.0"/>
                                                <Action ID="ResetValueAction" reset_value="1" task_nums="{task_nums}"/>
                                            </Sequence>
                                            <Sequence>
                                                <AlwaysSuccess/>
                                                <Action ID="ResetValueAction" reset_value="0" task_nums="{task_nums}"/>
                                            </Sequence>
                                        </IfThenElse>
                                    </Sequence>
                                    <AlwaysSuccess/>
                                </IfThenElse>
                            </Fallback>
                        </RetryUntilSuccessful>
                    </Sequence>
                    <AlwaysFailure/>
                </Switch6>
            </Repeat>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="ApproachDock">
            <input_port name="controller_plugin_name">...</input_port>
            <output_port default="{dock_pose}" name="dock_pose"/>
            <input_port name="expected_dock_pose">for perception</input_port>
            <input_port default="ekf_1" name="filter_plugin_name">...</input_port>
            <output_port name="goal_reached">Approach DONE</output_port>
            <input_port name="percepted_pose_offset"/>
            <input_port name="perception_plugin_name">...</input_port>
            <input_port default="/approach_dock" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
        </Action>
        <Action ID="BackUp">
            <input_port default="0.25" name="backup_dist">Distance to backup</input_port>
            <input_port default="0.05" name="backup_speed">Speed at which to backup</input_port>
            <input_port default="/backup" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
        </Action>
        <Action ID="ClearEntireCostmap">
            <input_port name="server_timeout">...</input_port>
            <input_port default="clear_planner_costmap" name="service_name">Service name</input_port>
        </Action>
        <Action ID="ComputePathToPose">
            <input_port name="goal">Destination to plan to</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id"/>
            <input_port default="/compute_path" name="server_name">remapped action server name.</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="CoveragePath">
            <input_port name="edge_path">Coverage path edge.</input_port>
            <output_port name="path">Coverage path out.</output_port>
            <output_port name="path_found">Path found.</output_port>
            <input_port name="planner_id">Planner_plugin.</input_port>
            <input_port default="/get_map_station_pose" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="start_pose">Start pose to start coverage.</input_port>
        </Action>
        <Action ID="FetchItemAction">
            <input_port name="in_items">get string item from vector string.</input_port>
            <output_port name="out_item">fetch string item in order.</output_port>
        </Action>
        <Action ID="FinalDock">
            <output_port name="dock_finished">Dock DONE</output_port>
            <input_port default="{dock_pose}" name="dock_pose">Final dock pose</input_port>
            <input_port name="rotate_in_place">rotate_in_place</input_port>
            <input_port default="/final_dock" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
        </Action>
        <Action ID="FollowPath">
            <input_port name="controller_id"/>
            <input_port name="path">Path to follow</input_port>
            <input_port default="/follow_path" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
        </Action>
        <Action ID="GetAreaEdge">
            <input_port name="area">The area such as A1.</input_port>
            <output_port name="edge_path">The edge of the area.</output_port>
            <input_port name="server_timeout">...</input_port>
            <input_port default="/get_map_area_edge" name="service_name">remapped action server name</input_port>
        </Action>
        <Action ID="GetClosestId">
            <output_port name="closest_id">The closest id</output_port>
            <input_port name="current_pos">...</input_port>
            <input_port name="nodes_path">Nodes file path</input_port>
        </Action>
        <Action ID="GetControllerPluginService"/>
        <Action ID="GetDriveableAreaId">
            <output_port name="current_area_id">current area id</output_port>
            <input_port name="current_pos">current pos</input_port>
            <output_port name="multi_task_polygon"/>
            <input_port name="task_polygons">task polygons</input_port>
        </Action>
        <Action ID="GetPathFirstPointAction">
            <input_port name="follow_path_ros">task_path_ros</input_port>
            <output_port name="inverse_multi_teaching_path_ros"/>
            <output_port name="task_path_first_pose">first pose</output_port>
            <output_port name="task_path_last_pose"/>
        </Action>
        <Action ID="GetPlannerPluginService"/>
        <Decorator ID="GetPositionInFrame">
            <output_port name="current_pos">Robot current position</output_port>
            <input_port default="0.0" name="expand_dis"/>
            <input_port default="map" name="frame_id">Target frame id</input_port>
        </Decorator>
        <Action ID="GetRoutePath">
            <input_port name="route">The route such as LM1, LM2, LM3, LM9.</input_port>
            <output_port name="route_path">The path of the route.</output_port>
            <input_port name="server_timeout">...</input_port>
            <input_port default="/get_map_route_path" name="service_name">remapped action server name</input_port>
        </Action>
        <Action ID="GetSelectionPolygonService">
            <input_port name="is_saved">do you need to get a saved polygon from the server?</input_port>
            <output_port name="polygon">get polygon points from server</output_port>
            <input_port name="saved_path">path to the saved polygon file</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port default="/get_selection" name="service_name">remapped action server name</input_port>
        </Action>
        <Action ID="GetStationPose">
            <input_port name="server_timeout">...</input_port>
            <input_port default="/get_map_station_pose" name="service_name">remapped action server name</input_port>
            <input_port name="station">station name or id.</input_port>
            <output_port name="station_pose">The pose of the station.</output_port>
        </Action>
        <Condition ID="GoalUpdated">
            <input_port name="goal_updated">Is goal updated</input_port>
        </Condition>
        <Decorator ID="GoalUpdater">
            <input_port name="input_goal">Original goal in</input_port>
            <output_port name="output_goal">Output goal set by subscription</output_port>
        </Decorator>
        <Action ID="HandleViaPoints">
            <output_port name="multi_teaching_path_ros">multi_teaching_path_ros</output_port>
            <input_port name="task_paths">task_paths</input_port>
            <input_port name="task_polygons">task polygons</input_port>
            <input_port name="via_indexes">via_indexes</input_port>
            <output_port name="via_indexes_finished">via_indexes_finished</output_port>
        </Action>
        <Action ID="InversePath">
            <output_port name="inverse_multi_teaching_path_ros"/>
            <input_port name="multi_teaching_path_ros"/>
        </Action>
        <Condition ID="IsBatteryLow">
            <input_port name="battery_topic">Topic for battery info</input_port>
            <input_port name="is_voltage">Bool if check based on voltage or total %</input_port>
            <input_port name="min_battery">Min battery % or voltage before triggering</input_port>
        </Condition>
        <Action ID="LoadPolygonJsonService">
            <input_port name="json_file_path">path of the polygon to get from the server</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port default="/load_json_data" name="service_name">remapped action server name</input_port>
        </Action>
        <Action ID="NemComputePathToPoseAction">
            <input_port name="closest_id"/>
            <input_port name="goal">Destination to plan to</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id"/>
            <input_port default="/compute_path" name="server_name">remapped action server name.</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="PWHCoveragePlannerAction">
            <output_port name="coverage_whole_path">coverage path</output_port>
            <output_port name="path_updated">coverage path update</output_port>
            <input_port name="plugin_name">coverage path planner name</input_port>
            <input_port default="/polygon_coverage_path" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="task_polygon">task_polygon</input_port>
        </Action>
        <Control ID="PipelineSequence"/>
        <Action ID="PrintBlackboardValue">
            <input_port name="target_point">Current position of the agent</input_port>
        </Action>
        <Decorator ID="RateController">
            <input_port name="hz">Rate</input_port>
        </Decorator>
        <Control ID="RecoveryNode">
            <input_port name="number_of_retries">Number of retries</input_port>
        </Control>
        <Action ID="RemovePassedGoals">
            <input_port name="input_goals">Original goals to remove viapoints from</input_port>
            <input_port name="input_path">Original Global Planner Path</input_port>
            <output_port name="output_goals">Goals with passed viapoints removed(truncated goals)</output_port>
            <input_port default="0.2" name="radius">radius to goal for it to be considered for removal</input_port>
        </Action>
        <Action ID="ResetValueAction">
            <input_port name="reset_value"/>
            <inout_port name="task_nums"/>
        </Action>
        <Action ID="Rotate">
            <input_port default="true" name="is_rotate_clockwise">Rotate direction defalt is clockwise</input_port>
            <input_port default="0.1" name="rotate_rad">Rotate value in rad</input_port>
            <input_port default="0.1" name="rotate_speed">Rotate speed in rad/s</input_port>
            <input_port default="/rotate" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
        </Action>
        <Action ID="RoutingAction">
            <input_port name="goal_area">goal area</input_port>
            <output_port name="is_cross_region">is cross region</output_port>
            <input_port default="/routing" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="start_area">start area</input_port>
            <input_port name="task_paths">task paths</input_port>
            <input_port name="task_polygons">task polygon</input_port>
            <input_port name="via_areas">via areas</input_port>
            <output_port name="via_indexes">via indexes</output_port>
            <input_port name="via_nums"/>
        </Action>
        <Decorator ID="SelectNearestPose">
            <input_port name="current_pos">Current position of the agent</input_port>
            <input_port name="reference_path">Reference path</input_port>
            <input_port default="0.2" name="step_length">Step length to the next target point</input_port>
            <output_port name="target_point">Selected target point in the reference path</output_port>
        </Decorator>
        <Action ID="SetCleanModeAction">
            <input_port name="clean_mode"/>
            <input_port name="server_name"/>
            <input_port name="server_timeout"/>
        </Action>
        <Action ID="SwitchMapService">
            <input_port default="0.5" name="server_timeout">Service name</input_port>
            <input_port default="/navit/switch_map" name="service_name">Service name</input_port>
            <input_port name="switch_map_name">rswitch map name</input_port>
        </Action>
        <Action ID="SynchronizeNeFilesService">
            <input_port name="edges_path">Edges file path</input_port>
            <input_port name="nodes_path">Nodes file path</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port default="/get_map_route_path" name="service_name">remapped action server name</input_port>
        </Action>
        <Action ID="TaskCommandAction">
            <output_port name="charge_pose_ros"/>
            <input_port name="final_dock_distance"/>
            <output_port name="final_dock_pose_ros"/>
            <output_port name="multi_teaching_path_ros"/>
            <output_port name="nearby_charge_pose_ros"/>
            <output_port name="repeat_times"/>
            <output_port name="task_cmd"/>
            <output_port name="task_cmd_updated">task_cmd_updated</output_port>
            <input_port name="task_goal_area_id"/>
            <output_port name="task_nums"/>
            <output_port name="task_path">task_point</output_port>
            <output_port name="task_path_ros"/>
            <input_port name="task_paths">Topic for battery info</input_port>
            <output_port name="task_point">task_point</output_port>
            <output_port name="task_points">Bool if check based on voltage or total %</output_port>
            <input_port name="task_polygon">task_polygon</input_port>
            <input_port name="task_polygons">task_polygons</input_port>
            <output_port name="task_pose_ros">task_pose_ros</output_port>
            <output_port name="task_via_area_ids"/>
            <output_port name="via_indexes"/>
        </Action>
        <Action ID="TaskMapParserAction">
            <output_port name="task_paths">task_paths</output_port>
            <output_port name="task_points">task_points</output_port>
            <output_port name="task_polygons">task polygons</output_port>
        </Action>
        <Action ID="TaskReceiverAction">
            <output_port name="cmd">receive cmd.</output_port>
            <output_port name="cmd_param_go_coverage">go coverage areas param.</output_port>
            <output_port name="cmd_param_go_path">go path stations param.</output_port>
            <output_port name="cmd_param_go_pose">go pose param.</output_port>
            <input_port default="true" name="grpc_enable">grpc enable.</input_port>
            <input_port default="50051" name="grpc_port">...</input_port>
        </Action>
        <Action ID="TruncatePath">
            <input_port name="distance" type="double">distance</input_port>
            <input_port name="input_path">Original Path</input_port>
            <output_port name="output_path">Path truncated to a certain distance</output_port>
        </Action>
        <Decorator ID="ViaPoints">
            <output_port name="output_path">following via points path</output_port>
            <input_port default="/via_points" name="topic_name">via points topic name</input_port>
        </Decorator>
        <Action ID="Wait">
            <input_port default="/wait" name="server_name">remapped action server name</input_port>
            <input_port name="server_timeout">...</input_port>
            <input_port name="wait_duration">Wait time</input_port>
        </Action>
        <Decorator ID="WayPoints">
            <input_port default="true" name="accept_new_goal">True for new goal receive</input_port>
            <input_port default="false" name="goal_without_loop">True for new goal to stop all way-points LOOP; false                for restart remain loop            </input_port>
            <input_port name="input_goal">Original goal in</input_port>
            <input_port default="false" name="jump_goal">True for new received simple goal will replace current goal in                loop; false for following current goal in loop after arrived simple goal            </input_port>
            <input_port default="0" name="max_loop">max loop number, zero or negative means inf.</input_port>
            <output_port name="output_goal">Output goal set by subscription</output_port>
            <input_port default="{path}" name="path">Global path</input_port>
            <input_port default="move_base_simple/goal" name="simple_goal_topic">simple goal name</input_port>
            <input_port default="way_points" name="way_points_topic">way points topic name</input_port>
        </Decorator>
    </TreeNodesModel>
    <!-- ////////// -->
</root>
