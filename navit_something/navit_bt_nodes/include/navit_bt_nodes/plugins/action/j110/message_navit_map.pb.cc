// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_navit_map.proto

#include "message_navit_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_5fnavit_5fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapConnectionInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Property;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapBasicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapLine;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fnavit_5fmap_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MapInfo;
}  // namespace protobuf_message_5fnavit_5fmap_2eproto
namespace navit {
namespace protocol {
namespace map_info {
class PropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Property>
      _instance;
} _Property_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class MapBasicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBasicInfo>
      _instance;
} _MapBasicInfo_default_instance_;
class MapPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapPoint>
      _instance;
} _MapPoint_default_instance_;
class MapLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLine>
      _instance;
} _MapLine_default_instance_;
class MapAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapArea>
      _instance;
} _MapArea_default_instance_;
class MapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapInfo>
      _instance;
} _MapInfo_default_instance_;
class MapConnectionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapConnectionInfo>
      _instance;
} _MapConnectionInfo_default_instance_;
class TotalMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TotalMapInfo>
      _instance;
} _TotalMapInfo_default_instance_;
class ItemPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ItemProperty>
      _instance;
} _ItemProperty_default_instance_;
}  // namespace map_info
}  // namespace protocol
}  // namespace navit
namespace protobuf_message_5fnavit_5fmap_2eproto {
static void InitDefaultsProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_Property_default_instance_;
    new (ptr) ::navit::protocol::map_info::Property();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::Property::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Property =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProperty}, {}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_Point_default_instance_;
    new (ptr) ::navit::protocol::map_info::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsMapBasicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapBasicInfo_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapBasicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapBasicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapBasicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapBasicInfo}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base,}};

static void InitDefaultsMapPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapPoint_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapPoint}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Property.base,}};

static void InitDefaultsMapLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapLine_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapLine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapLine}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Property.base,}};

static void InitDefaultsMapArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapArea_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapArea}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Property.base,}};

static void InitDefaultsMapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapInfo_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMapInfo}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapBasicInfo.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapPoint.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapLine.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapArea.base,}};

static void InitDefaultsMapConnectionInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_MapConnectionInfo_default_instance_;
    new (ptr) ::navit::protocol::map_info::MapConnectionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::MapConnectionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapConnectionInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapConnectionInfo}, {}};

static void InitDefaultsTotalMapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_TotalMapInfo_default_instance_;
    new (ptr) ::navit::protocol::map_info::TotalMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::TotalMapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TotalMapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTotalMapInfo}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapInfo.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapConnectionInfo.base,}};

static void InitDefaultsItemProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navit::protocol::map_info::_ItemProperty_default_instance_;
    new (ptr) ::navit::protocol::map_info::ItemProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navit::protocol::map_info::ItemProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ItemProperty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsItemProperty}, {
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapPoint.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapLine.base,
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapArea.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Property.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapBasicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapLine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapConnectionInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TotalMapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ItemProperty.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Property, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Property, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Property, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Property, desc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, ry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::Point, rz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, min_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, max_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapBasicInfo, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, ignore_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapPoint, property_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, start_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, end_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapLine, property_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapArea, property_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, map_basic_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, map_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, map_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, map_areas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapInfo, map_forbidden_lines_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, from_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, from_map_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, to_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, to_map_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::MapConnectionInfo, cost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::TotalMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::TotalMapInfo, map_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::TotalMapInfo, map_connection_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::ItemProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::ItemProperty, item_property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::ItemProperty, map_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::ItemProperty, map_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::navit::protocol::map_info::ItemProperty, map_polygon_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::navit::protocol::map_info::Property)},
  { 9, -1, sizeof(::navit::protocol::map_info::Point)},
  { 20, -1, sizeof(::navit::protocol::map_info::MapBasicInfo)},
  { 32, -1, sizeof(::navit::protocol::map_info::MapPoint)},
  { 43, -1, sizeof(::navit::protocol::map_info::MapLine)},
  { 55, -1, sizeof(::navit::protocol::map_info::MapArea)},
  { 66, -1, sizeof(::navit::protocol::map_info::MapInfo)},
  { 76, -1, sizeof(::navit::protocol::map_info::MapConnectionInfo)},
  { 86, -1, sizeof(::navit::protocol::map_info::TotalMapInfo)},
  { 93, -1, sizeof(::navit::protocol::map_info::ItemProperty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_Property_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapBasicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_MapConnectionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_TotalMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::navit::protocol::map_info::_ItemProperty_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message_navit_map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027message_navit_map.proto\022\027navit.protoco"
      "l.map_info\"B\n\010Property\022\013\n\003key\030\001 \001(\t\022\014\n\004t"
      "ype\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\"L"
      "\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
      "\022\n\n\002rx\030\004 \001(\001\022\n\n\002ry\030\005 \001(\001\022\n\n\002rz\030\006 \001(\001\"\311\001\n"
      "\014MapBasicInfo\022\016\n\006map_id\030\001 \001(\003\022\020\n\010map_nam"
      "e\030\002 \001(\t\022\020\n\010map_type\030\003 \001(\t\022/\n\007min_pos\030\004 \001"
      "(\0132\036.navit.protocol.map_info.Point\022/\n\007ma"
      "x_pos\030\005 \001(\0132\036.navit.protocol.map_info.Po"
      "int\022\022\n\nresolution\030\006 \001(\001\022\017\n\007version\030\007 \001(\t"
      "\"\353\002\n\010MapPoint\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022"
      "9\n\004type\030\003 \001(\0162+.navit.protocol.map_info."
      "MapPoint.PointType\022-\n\005point\030\004 \001(\0132\036.navi"
      "t.protocol.map_info.Point\022\022\n\nignore_dir\030"
      "\005 \001(\010\0223\n\010property\030\006 \003(\0132!.navit.protocol"
      ".map_info.Property\"\221\001\n\tPointType\022\026\n\022POIN"
      "T_TYPE_DEFAULT\020\000\022\035\n\031POINT_TYPE_COMMON_ST"
      "ATION\020\001\022\"\n\036POINT_TYPE_CHARGE_PILE_STATIO"
      "N\020\002\022)\n%POINT_TYPE_NEARBY_CHARGE_PILE_STA"
      "TION\020\003\"\351\002\n\007MapLine\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002"
      " \001(\t\0227\n\004type\030\003 \001(\0162).navit.protocol.map_"
      "info.MapLine.LineType\022\026\n\016start_point_id\030"
      "\004 \001(\003\022\024\n\014end_point_id\030\005 \001(\003\022,\n\004path\030\006 \003("
      "\0132\036.navit.protocol.map_info.Point\0223\n\010pro"
      "perty\030\007 \003(\0132!.navit.protocol.map_info.Pr"
      "operty\"z\n\010LineType\022\025\n\021LINE_TYPE_DEFAULT\020"
      "\000\022\024\n\020LINE_TYPE_BEZIER\020\001\022\026\n\022LINE_TYPE_DIS"
      "CRETE\020\002\022\021\n\rLINE_TYPE_ARC\020\003\022\026\n\022LINE_TYPE_"
      "TEACHING\020\004\"\233\003\n\007MapArea\022\n\n\002id\030\001 \001(\003\022\014\n\004na"
      "me\030\002 \001(\t\0227\n\004type\030\003 \001(\0162).navit.protocol."
      "map_info.MapArea.AreaType\022\021\n\tparent_id\030\004"
      " \001(\003\022,\n\004path\030\005 \003(\0132\036.navit.protocol.map_"
      "info.Point\0223\n\010property\030\006 \003(\0132!.navit.pro"
      "tocol.map_info.Property\"\306\001\n\010AreaType\022\025\n\021"
      "AREA_TYPE_DEFAULT\020\000\022\033\n\027AREA_TYPE_FULL_CO"
      "VERAGE\020\001\022\034\n\030AREA_TYPE_FORBIDDEN_AREA\020\n\022!"
      "\n\035AREA_TYPE_FORBIDDEN_TURN_AREA\020\013\022\034\n\030ARE"
      "A_TYPE_SLOW_DOWN_AREA\020\014\022\'\n#AREA_TYPE_FOR"
      "BIDDEN_BYPASS_OBS_AREA\020\r\"\250\002\n\007MapInfo\022=\n\016"
      "map_basic_info\030\001 \001(\0132%.navit.protocol.ma"
      "p_info.MapBasicInfo\0225\n\nmap_points\030\013 \003(\0132"
      "!.navit.protocol.map_info.MapPoint\0223\n\tma"
      "p_lines\030\014 \003(\0132 .navit.protocol.map_info."
      "MapLine\0223\n\tmap_areas\030\r \003(\0132 .navit.proto"
      "col.map_info.MapArea\022=\n\023map_forbidden_li"
      "nes\030\025 \003(\0132 .navit.protocol.map_info.MapL"
      "ine\"}\n\021MapConnectionInfo\022\023\n\013from_map_id\030"
      "\001 \001(\t\022\031\n\021from_map_point_id\030\002 \001(\t\022\021\n\tto_m"
      "ap_id\030\003 \001(\t\022\027\n\017to_map_point_id\030\004 \001(\t\022\014\n\004"
      "cost\030\005 \001(\001\"\215\001\n\014TotalMapInfo\0223\n\tmap_infos"
      "\030\001 \003(\0132 .navit.protocol.map_info.MapInfo"
      "\022H\n\024map_connection_infos\030\002 \003(\0132*.navit.p"
      "rotocol.map_info.MapConnectionInfo\"\302\002\n\014I"
      "temProperty\022F\n\ritem_property\030\001 \001(\0162/.nav"
      "it.protocol.map_info.ItemProperty.Proper"
      "tiy\0224\n\tmap_point\030\002 \001(\0132!.navit.protocol."
      "map_info.MapPoint\0222\n\010map_line\030\003 \001(\0132 .na"
      "vit.protocol.map_info.MapLine\0225\n\013map_pol"
      "ygon\030\004 \001(\0132 .navit.protocol.map_info.Map"
      "Area\"I\n\tPropertiy\022\013\n\007DEFAULT\020\000\022\r\n\tLINE_T"
      "OOL\020\001\022\016\n\nPOINT_TOOL\020\002\022\020\n\014POLYGON_TOOL\020\003b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_navit_map.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_5fnavit_5fmap_2eproto
namespace navit {
namespace protocol {
namespace map_info {
const ::google::protobuf::EnumDescriptor* MapPoint_PointType_descriptor() {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_5fnavit_5fmap_2eproto::file_level_enum_descriptors[0];
}
bool MapPoint_PointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MapPoint_PointType MapPoint::POINT_TYPE_DEFAULT;
const MapPoint_PointType MapPoint::POINT_TYPE_COMMON_STATION;
const MapPoint_PointType MapPoint::POINT_TYPE_CHARGE_PILE_STATION;
const MapPoint_PointType MapPoint::POINT_TYPE_NEARBY_CHARGE_PILE_STATION;
const MapPoint_PointType MapPoint::PointType_MIN;
const MapPoint_PointType MapPoint::PointType_MAX;
const int MapPoint::PointType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MapLine_LineType_descriptor() {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_5fnavit_5fmap_2eproto::file_level_enum_descriptors[1];
}
bool MapLine_LineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MapLine_LineType MapLine::LINE_TYPE_DEFAULT;
const MapLine_LineType MapLine::LINE_TYPE_BEZIER;
const MapLine_LineType MapLine::LINE_TYPE_DISCRETE;
const MapLine_LineType MapLine::LINE_TYPE_ARC;
const MapLine_LineType MapLine::LINE_TYPE_TEACHING;
const MapLine_LineType MapLine::LineType_MIN;
const MapLine_LineType MapLine::LineType_MAX;
const int MapLine::LineType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MapArea_AreaType_descriptor() {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_5fnavit_5fmap_2eproto::file_level_enum_descriptors[2];
}
bool MapArea_AreaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MapArea_AreaType MapArea::AREA_TYPE_DEFAULT;
const MapArea_AreaType MapArea::AREA_TYPE_FULL_COVERAGE;
const MapArea_AreaType MapArea::AREA_TYPE_FORBIDDEN_AREA;
const MapArea_AreaType MapArea::AREA_TYPE_FORBIDDEN_TURN_AREA;
const MapArea_AreaType MapArea::AREA_TYPE_SLOW_DOWN_AREA;
const MapArea_AreaType MapArea::AREA_TYPE_FORBIDDEN_BYPASS_OBS_AREA;
const MapArea_AreaType MapArea::AreaType_MIN;
const MapArea_AreaType MapArea::AreaType_MAX;
const int MapArea::AreaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ItemProperty_Propertiy_descriptor() {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_5fnavit_5fmap_2eproto::file_level_enum_descriptors[3];
}
bool ItemProperty_Propertiy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ItemProperty_Propertiy ItemProperty::DEFAULT;
const ItemProperty_Propertiy ItemProperty::LINE_TOOL;
const ItemProperty_Propertiy ItemProperty::POINT_TOOL;
const ItemProperty_Propertiy ItemProperty::POLYGON_TOOL;
const ItemProperty_Propertiy ItemProperty::Propertiy_MIN;
const ItemProperty_Propertiy ItemProperty::Propertiy_MAX;
const int ItemProperty::Propertiy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Property::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Property::kKeyFieldNumber;
const int Property::kTypeFieldNumber;
const int Property::kValueFieldNumber;
const int Property::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Property::Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Property.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.Property)
}
Property::Property(const Property& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.Property)
}

void Property::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Property& Property::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_Property.base);
  return *internal_default_instance();
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.Property)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.Property.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.Property.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.Property.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.Property.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // string desc = 4;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.Property)
}

::google::protobuf::uint8* Property::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // string desc = 4;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.Property.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.Property)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string desc = 4;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::Swap(Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Property::InternalSwap(Property* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRxFieldNumber;
const int Point::kRyFieldNumber;
const int Point::kRzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rz_) -
    reinterpret_cast<char*>(&x_)) + sizeof(rz_));
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rz_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rz_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double rx = 4;
  if (this->rx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rx(), output);
  }

  // double ry = 5;
  if (this->ry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ry(), output);
  }

  // double rz = 6;
  if (this->rz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double rx = 4;
  if (this->rx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rx(), target);
  }

  // double ry = 5;
  if (this->ry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ry(), target);
  }

  // double rz = 6;
  if (this->rz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  if (this->rx() != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  if (this->ry() != 0) {
    total_size += 1 + 8;
  }

  // double rz = 6;
  if (this->rz() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.rx() != 0) {
    set_rx(from.rx());
  }
  if (from.ry() != 0) {
    set_ry(from.ry());
  }
  if (from.rz() != 0) {
    set_rz(from.rz());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(rx_, other->rx_);
  swap(ry_, other->ry_);
  swap(rz_, other->rz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapBasicInfo::InitAsDefaultInstance() {
  ::navit::protocol::map_info::_MapBasicInfo_default_instance_._instance.get_mutable()->min_pos_ = const_cast< ::navit::protocol::map_info::Point*>(
      ::navit::protocol::map_info::Point::internal_default_instance());
  ::navit::protocol::map_info::_MapBasicInfo_default_instance_._instance.get_mutable()->max_pos_ = const_cast< ::navit::protocol::map_info::Point*>(
      ::navit::protocol::map_info::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBasicInfo::kMapIdFieldNumber;
const int MapBasicInfo::kMapNameFieldNumber;
const int MapBasicInfo::kMapTypeFieldNumber;
const int MapBasicInfo::kMinPosFieldNumber;
const int MapBasicInfo::kMaxPosFieldNumber;
const int MapBasicInfo::kResolutionFieldNumber;
const int MapBasicInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBasicInfo::MapBasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapBasicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapBasicInfo)
}
MapBasicInfo::MapBasicInfo(const MapBasicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_name().size() > 0) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  map_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_type().size() > 0) {
    map_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_type_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_min_pos()) {
    min_pos_ = new ::navit::protocol::map_info::Point(*from.min_pos_);
  } else {
    min_pos_ = NULL;
  }
  if (from.has_max_pos()) {
    max_pos_ = new ::navit::protocol::map_info::Point(*from.max_pos_);
  } else {
    max_pos_ = NULL;
  }
  ::memcpy(&map_id_, &from.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&map_id_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapBasicInfo)
}

void MapBasicInfo::SharedCtor() {
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&min_pos_)) + sizeof(resolution_));
}

MapBasicInfo::~MapBasicInfo() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapBasicInfo)
  SharedDtor();
}

void MapBasicInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_pos_;
  if (this != internal_default_instance()) delete max_pos_;
}

void MapBasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapBasicInfo::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapBasicInfo& MapBasicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapBasicInfo.base);
  return *internal_default_instance();
}


void MapBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && min_pos_ != NULL) {
    delete min_pos_;
  }
  min_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_pos_ != NULL) {
    delete max_pos_;
  }
  max_pos_ = NULL;
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(resolution_));
  _internal_metadata_.Clear();
}

bool MapBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapBasicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 map_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapBasicInfo.map_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_type().data(), static_cast<int>(this->map_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapBasicInfo.map_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.Point min_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.Point max_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double resolution = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapBasicInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapBasicInfo)
  return false;
#undef DO_
}

void MapBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 map_id = 1;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->map_id(), output);
  }

  // string map_name = 2;
  if (this->map_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_name(), output);
  }

  // string map_type = 3;
  if (this->map_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_type().data(), static_cast<int>(this->map_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.map_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_type(), output);
  }

  // .navit.protocol.map_info.Point min_pos = 4;
  if (this->has_min_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_min_pos(), output);
  }

  // .navit.protocol.map_info.Point max_pos = 5;
  if (this->has_max_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_max_pos(), output);
  }

  // double resolution = 6;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->resolution(), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapBasicInfo)
}

::google::protobuf::uint8* MapBasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 map_id = 1;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->map_id(), target);
  }

  // string map_name = 2;
  if (this->map_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  // string map_type = 3;
  if (this->map_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_type().data(), static_cast<int>(this->map_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.map_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_type(), target);
  }

  // .navit.protocol.map_info.Point min_pos = 4;
  if (this->has_min_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_min_pos(), deterministic, target);
  }

  // .navit.protocol.map_info.Point max_pos = 5;
  if (this->has_max_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_max_pos(), deterministic, target);
  }

  // double resolution = 6;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->resolution(), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapBasicInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapBasicInfo)
  return target;
}

size_t MapBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapBasicInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_name = 2;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_name());
  }

  // string map_type = 3;
  if (this->map_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_type());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .navit.protocol.map_info.Point min_pos = 4;
  if (this->has_min_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_pos_);
  }

  // .navit.protocol.map_info.Point max_pos = 5;
  if (this->has_max_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_pos_);
  }

  // int64 map_id = 1;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->map_id());
  }

  // double resolution = 6;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBasicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapBasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapBasicInfo)
    MergeFrom(*source);
  }
}

void MapBasicInfo::MergeFrom(const MapBasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_name().size() > 0) {

    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.map_type().size() > 0) {

    map_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_type_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_min_pos()) {
    mutable_min_pos()->::navit::protocol::map_info::Point::MergeFrom(from.min_pos());
  }
  if (from.has_max_pos()) {
    mutable_max_pos()->::navit::protocol::map_info::Point::MergeFrom(from.max_pos());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
}

void MapBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBasicInfo::CopyFrom(const MapBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBasicInfo::IsInitialized() const {
  return true;
}

void MapBasicInfo::Swap(MapBasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBasicInfo::InternalSwap(MapBasicInfo* other) {
  using std::swap;
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_type_.Swap(&other->map_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_pos_, other->min_pos_);
  swap(max_pos_, other->max_pos_);
  swap(map_id_, other->map_id_);
  swap(resolution_, other->resolution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapBasicInfo::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapPoint::InitAsDefaultInstance() {
  ::navit::protocol::map_info::_MapPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::navit::protocol::map_info::Point*>(
      ::navit::protocol::map_info::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapPoint::kIdFieldNumber;
const int MapPoint::kNameFieldNumber;
const int MapPoint::kTypeFieldNumber;
const int MapPoint::kPointFieldNumber;
const int MapPoint::kIgnoreDirFieldNumber;
const int MapPoint::kPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapPoint::MapPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapPoint)
}
MapPoint::MapPoint(const MapPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      property_(from.property_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_point()) {
    point_ = new ::navit::protocol::map_info::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_dir_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ignore_dir_));
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapPoint)
}

void MapPoint::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_dir_) -
      reinterpret_cast<char*>(&point_)) + sizeof(ignore_dir_));
}

MapPoint::~MapPoint() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapPoint)
  SharedDtor();
}

void MapPoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
}

void MapPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapPoint::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapPoint& MapPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapPoint.base);
  return *internal_default_instance();
}


void MapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_dir_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ignore_dir_));
  _internal_metadata_.Clear();
}

bool MapPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapPoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapPoint.PointType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::navit::protocol::map_info::MapPoint_PointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.Point point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.Property property = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapPoint)
  return false;
#undef DO_
}

void MapPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapPoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .navit.protocol.map_info.MapPoint.PointType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .navit.protocol.map_info.Point point = 4;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_point(), output);
  }

  // bool ignore_dir = 5;
  if (this->ignore_dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ignore_dir(), output);
  }

  // repeated .navit.protocol.map_info.Property property = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->property(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapPoint)
}

::google::protobuf::uint8* MapPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapPoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .navit.protocol.map_info.MapPoint.PointType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .navit.protocol.map_info.Point point = 4;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_point(), deterministic, target);
  }

  // bool ignore_dir = 5;
  if (this->ignore_dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ignore_dir(), target);
  }

  // repeated .navit.protocol.map_info.Property property = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->property(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapPoint)
  return target;
}

size_t MapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .navit.protocol.map_info.Property property = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->property_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->property(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .navit.protocol.map_info.Point point = 4;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .navit.protocol.map_info.MapPoint.PointType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool ignore_dir = 5;
  if (this->ignore_dir() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapPoint)
    MergeFrom(*source);
  }
}

void MapPoint::MergeFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_point()) {
    mutable_point()->::navit::protocol::map_info::Point::MergeFrom(from.point());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.ignore_dir() != 0) {
    set_ignore_dir(from.ignore_dir());
  }
}

void MapPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPoint::CopyFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPoint::IsInitialized() const {
  return true;
}

void MapPoint::Swap(MapPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapPoint::InternalSwap(MapPoint* other) {
  using std::swap;
  CastToBase(&property_)->InternalSwap(CastToBase(&other->property_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(ignore_dir_, other->ignore_dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapPoint::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLine::kIdFieldNumber;
const int MapLine::kNameFieldNumber;
const int MapLine::kTypeFieldNumber;
const int MapLine::kStartPointIdFieldNumber;
const int MapLine::kEndPointIdFieldNumber;
const int MapLine::kPathFieldNumber;
const int MapLine::kPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLine::MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapLine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapLine)
}
MapLine::MapLine(const MapLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_),
      property_(from.property_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapLine)
}

void MapLine::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MapLine::~MapLine() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapLine)
  SharedDtor();
}

void MapLine::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapLine::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapLine& MapLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapLine.base);
  return *internal_default_instance();
}


void MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  property_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapLine.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapLine.LineType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::navit::protocol::map_info::MapLine_LineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_point_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_point_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.Point path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.Property property = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapLine)
  return false;
#undef DO_
}

void MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapLine.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .navit.protocol.map_info.MapLine.LineType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int64 start_point_id = 4;
  if (this->start_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_point_id(), output);
  }

  // int64 end_point_id = 5;
  if (this->end_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_point_id(), output);
  }

  // repeated .navit.protocol.map_info.Point path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->path(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.Property property = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->property(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapLine)
}

::google::protobuf::uint8* MapLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapLine.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .navit.protocol.map_info.MapLine.LineType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // int64 start_point_id = 4;
  if (this->start_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_point_id(), target);
  }

  // int64 end_point_id = 5;
  if (this->end_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_point_id(), target);
  }

  // repeated .navit.protocol.map_info.Point path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->path(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.Property property = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->property(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapLine)
  return target;
}

size_t MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .navit.protocol.map_info.Point path = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.Property property = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->property_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->property(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 start_point_id = 4;
  if (this->start_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_point_id());
  }

  // int64 end_point_id = 5;
  if (this->end_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_point_id());
  }

  // .navit.protocol.map_info.MapLine.LineType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapLine)
    MergeFrom(*source);
  }
}

void MapLine::MergeFrom(const MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  property_.MergeFrom(from.property_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.start_point_id() != 0) {
    set_start_point_id(from.start_point_id());
  }
  if (from.end_point_id() != 0) {
    set_end_point_id(from.end_point_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MapLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLine::CopyFrom(const MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLine::IsInitialized() const {
  return true;
}

void MapLine::Swap(MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapLine::InternalSwap(MapLine* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  CastToBase(&property_)->InternalSwap(CastToBase(&other->property_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(start_point_id_, other->start_point_id_);
  swap(end_point_id_, other->end_point_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapLine::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapArea::kIdFieldNumber;
const int MapArea::kNameFieldNumber;
const int MapArea::kTypeFieldNumber;
const int MapArea::kParentIdFieldNumber;
const int MapArea::kPathFieldNumber;
const int MapArea::kPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapArea::MapArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapArea)
}
MapArea::MapArea(const MapArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_),
      property_(from.property_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapArea)
}

void MapArea::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MapArea::~MapArea() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapArea)
  SharedDtor();
}

void MapArea::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapArea::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapArea& MapArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapArea.base);
  return *internal_default_instance();
}


void MapArea::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  property_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool MapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapArea.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapArea.AreaType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::navit::protocol::map_info::MapArea_AreaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parent_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.Point path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.Property property = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapArea)
  return false;
#undef DO_
}

void MapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapArea.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .navit.protocol.map_info.MapArea.AreaType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int64 parent_id = 4;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parent_id(), output);
  }

  // repeated .navit.protocol.map_info.Point path = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->path(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.Property property = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->property(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapArea)
}

::google::protobuf::uint8* MapArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapArea.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .navit.protocol.map_info.MapArea.AreaType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // int64 parent_id = 4;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parent_id(), target);
  }

  // repeated .navit.protocol.map_info.Point path = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->path(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.Property property = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->property(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapArea)
  return target;
}

size_t MapArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapArea)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .navit.protocol.map_info.Point path = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.Property property = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->property_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->property(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 parent_id = 4;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parent_id());
  }

  // .navit.protocol.map_info.MapArea.AreaType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MapArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapArea)
    MergeFrom(*source);
  }
}

void MapArea::MergeFrom(const MapArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  property_.MergeFrom(from.property_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MapArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapArea::CopyFrom(const MapArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapArea::IsInitialized() const {
  return true;
}

void MapArea::Swap(MapArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapArea::InternalSwap(MapArea* other) {
  using std::swap;
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  CastToBase(&property_)->InternalSwap(CastToBase(&other->property_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapArea::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapInfo::InitAsDefaultInstance() {
  ::navit::protocol::map_info::_MapInfo_default_instance_._instance.get_mutable()->map_basic_info_ = const_cast< ::navit::protocol::map_info::MapBasicInfo*>(
      ::navit::protocol::map_info::MapBasicInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapInfo::kMapBasicInfoFieldNumber;
const int MapInfo::kMapPointsFieldNumber;
const int MapInfo::kMapLinesFieldNumber;
const int MapInfo::kMapAreasFieldNumber;
const int MapInfo::kMapForbiddenLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapInfo::MapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_points_(from.map_points_),
      map_lines_(from.map_lines_),
      map_areas_(from.map_areas_),
      map_forbidden_lines_(from.map_forbidden_lines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_basic_info()) {
    map_basic_info_ = new ::navit::protocol::map_info::MapBasicInfo(*from.map_basic_info_);
  } else {
    map_basic_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapInfo)
}

void MapInfo::SharedCtor() {
  map_basic_info_ = NULL;
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapInfo)
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete map_basic_info_;
}

void MapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapInfo& MapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapInfo.base);
  return *internal_default_instance();
}


void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_points_.Clear();
  map_lines_.Clear();
  map_areas_.Clear();
  map_forbidden_lines_.Clear();
  if (GetArenaNoVirtual() == NULL && map_basic_info_ != NULL) {
    delete map_basic_info_;
  }
  map_basic_info_ = NULL;
  _internal_metadata_.Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navit.protocol.map_info.MapBasicInfo map_basic_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_basic_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.MapPoint map_points = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.MapLine map_lines = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.MapArea map_areas = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_areas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.MapLine map_forbidden_lines = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_forbidden_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapInfo)
  return false;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navit.protocol.map_info.MapBasicInfo map_basic_info = 1;
  if (this->has_map_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_map_basic_info(), output);
  }

  // repeated .navit.protocol.map_info.MapPoint map_points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->map_points(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.MapLine map_lines = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->map_lines(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.MapArea map_areas = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_areas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->map_areas(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.MapLine map_forbidden_lines = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_forbidden_lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->map_forbidden_lines(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapInfo)
}

::google::protobuf::uint8* MapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navit.protocol.map_info.MapBasicInfo map_basic_info = 1;
  if (this->has_map_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_map_basic_info(), deterministic, target);
  }

  // repeated .navit.protocol.map_info.MapPoint map_points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->map_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.MapLine map_lines = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->map_lines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.MapArea map_areas = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_areas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->map_areas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.MapLine map_forbidden_lines = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_forbidden_lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->map_forbidden_lines(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .navit.protocol.map_info.MapPoint map_points = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->map_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_points(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.MapLine map_lines = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->map_lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_lines(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.MapArea map_areas = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->map_areas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_areas(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.MapLine map_forbidden_lines = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->map_forbidden_lines_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_forbidden_lines(static_cast<int>(i)));
    }
  }

  // .navit.protocol.map_info.MapBasicInfo map_basic_info = 1;
  if (this->has_map_basic_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_basic_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapInfo)
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_points_.MergeFrom(from.map_points_);
  map_lines_.MergeFrom(from.map_lines_);
  map_areas_.MergeFrom(from.map_areas_);
  map_forbidden_lines_.MergeFrom(from.map_forbidden_lines_);
  if (from.has_map_basic_info()) {
    mutable_map_basic_info()->::navit::protocol::map_info::MapBasicInfo::MergeFrom(from.map_basic_info());
  }
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  CastToBase(&map_points_)->InternalSwap(CastToBase(&other->map_points_));
  CastToBase(&map_lines_)->InternalSwap(CastToBase(&other->map_lines_));
  CastToBase(&map_areas_)->InternalSwap(CastToBase(&other->map_areas_));
  CastToBase(&map_forbidden_lines_)->InternalSwap(CastToBase(&other->map_forbidden_lines_));
  swap(map_basic_info_, other->map_basic_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapConnectionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapConnectionInfo::kFromMapIdFieldNumber;
const int MapConnectionInfo::kFromMapPointIdFieldNumber;
const int MapConnectionInfo::kToMapIdFieldNumber;
const int MapConnectionInfo::kToMapPointIdFieldNumber;
const int MapConnectionInfo::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapConnectionInfo::MapConnectionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapConnectionInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.MapConnectionInfo)
}
MapConnectionInfo::MapConnectionInfo(const MapConnectionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_map_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_map_id().size() > 0) {
    from_map_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_map_id_);
  }
  from_map_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_map_point_id().size() > 0) {
    from_map_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_map_point_id_);
  }
  to_map_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_map_id().size() > 0) {
    to_map_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_map_id_);
  }
  to_map_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_map_point_id().size() > 0) {
    to_map_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_map_point_id_);
  }
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.MapConnectionInfo)
}

void MapConnectionInfo::SharedCtor() {
  from_map_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_map_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = 0;
}

MapConnectionInfo::~MapConnectionInfo() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.MapConnectionInfo)
  SharedDtor();
}

void MapConnectionInfo::SharedDtor() {
  from_map_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_map_point_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_point_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapConnectionInfo::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapConnectionInfo& MapConnectionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_MapConnectionInfo.base);
  return *internal_default_instance();
}


void MapConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.MapConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_map_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_map_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_map_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = 0;
  _internal_metadata_.Clear();
}

bool MapConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.MapConnectionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_map_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_map_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_map_id().data(), static_cast<int>(this->from_map_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapConnectionInfo.from_map_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_map_point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_map_point_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_map_point_id().data(), static_cast<int>(this->from_map_point_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapConnectionInfo.from_map_point_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_map_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_map_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_map_id().data(), static_cast<int>(this->to_map_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapConnectionInfo.to_map_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_map_point_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_map_point_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_map_point_id().data(), static_cast<int>(this->to_map_point_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "navit.protocol.map_info.MapConnectionInfo.to_map_point_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.MapConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.MapConnectionInfo)
  return false;
#undef DO_
}

void MapConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.MapConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_map_id = 1;
  if (this->from_map_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_map_id().data(), static_cast<int>(this->from_map_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.from_map_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_map_id(), output);
  }

  // string from_map_point_id = 2;
  if (this->from_map_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_map_point_id().data(), static_cast<int>(this->from_map_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.from_map_point_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_map_point_id(), output);
  }

  // string to_map_id = 3;
  if (this->to_map_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_map_id().data(), static_cast<int>(this->to_map_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.to_map_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_map_id(), output);
  }

  // string to_map_point_id = 4;
  if (this->to_map_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_map_point_id().data(), static_cast<int>(this->to_map_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.to_map_point_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_map_point_id(), output);
  }

  // double cost = 5;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.MapConnectionInfo)
}

::google::protobuf::uint8* MapConnectionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.MapConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_map_id = 1;
  if (this->from_map_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_map_id().data(), static_cast<int>(this->from_map_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.from_map_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_map_id(), target);
  }

  // string from_map_point_id = 2;
  if (this->from_map_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_map_point_id().data(), static_cast<int>(this->from_map_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.from_map_point_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_map_point_id(), target);
  }

  // string to_map_id = 3;
  if (this->to_map_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_map_id().data(), static_cast<int>(this->to_map_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.to_map_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_map_id(), target);
  }

  // string to_map_point_id = 4;
  if (this->to_map_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_map_point_id().data(), static_cast<int>(this->to_map_point_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "navit.protocol.map_info.MapConnectionInfo.to_map_point_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_map_point_id(), target);
  }

  // double cost = 5;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.MapConnectionInfo)
  return target;
}

size_t MapConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.MapConnectionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_map_id = 1;
  if (this->from_map_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_map_id());
  }

  // string from_map_point_id = 2;
  if (this->from_map_point_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_map_point_id());
  }

  // string to_map_id = 3;
  if (this->to_map_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_map_id());
  }

  // string to_map_point_id = 4;
  if (this->to_map_point_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_map_point_id());
  }

  // double cost = 5;
  if (this->cost() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.MapConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapConnectionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapConnectionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.MapConnectionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.MapConnectionInfo)
    MergeFrom(*source);
  }
}

void MapConnectionInfo::MergeFrom(const MapConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.MapConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_map_id().size() > 0) {

    from_map_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_map_id_);
  }
  if (from.from_map_point_id().size() > 0) {

    from_map_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_map_point_id_);
  }
  if (from.to_map_id().size() > 0) {

    to_map_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_map_id_);
  }
  if (from.to_map_point_id().size() > 0) {

    to_map_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_map_point_id_);
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
}

void MapConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.MapConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapConnectionInfo::CopyFrom(const MapConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.MapConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapConnectionInfo::IsInitialized() const {
  return true;
}

void MapConnectionInfo::Swap(MapConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapConnectionInfo::InternalSwap(MapConnectionInfo* other) {
  using std::swap;
  from_map_id_.Swap(&other->from_map_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_map_point_id_.Swap(&other->from_map_point_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_map_id_.Swap(&other->to_map_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_map_point_id_.Swap(&other->to_map_point_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cost_, other->cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapConnectionInfo::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TotalMapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TotalMapInfo::kMapInfosFieldNumber;
const int TotalMapInfo::kMapConnectionInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TotalMapInfo::TotalMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_TotalMapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.TotalMapInfo)
}
TotalMapInfo::TotalMapInfo(const TotalMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_infos_(from.map_infos_),
      map_connection_infos_(from.map_connection_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.TotalMapInfo)
}

void TotalMapInfo::SharedCtor() {
}

TotalMapInfo::~TotalMapInfo() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.TotalMapInfo)
  SharedDtor();
}

void TotalMapInfo::SharedDtor() {
}

void TotalMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TotalMapInfo::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TotalMapInfo& TotalMapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_TotalMapInfo.base);
  return *internal_default_instance();
}


void TotalMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.TotalMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_infos_.Clear();
  map_connection_infos_.Clear();
  _internal_metadata_.Clear();
}

bool TotalMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.TotalMapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .navit.protocol.map_info.MapInfo map_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navit.protocol.map_info.MapConnectionInfo map_connection_infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_connection_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.TotalMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.TotalMapInfo)
  return false;
#undef DO_
}

void TotalMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.TotalMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .navit.protocol.map_info.MapInfo map_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_infos(static_cast<int>(i)),
      output);
  }

  // repeated .navit.protocol.map_info.MapConnectionInfo map_connection_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_connection_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->map_connection_infos(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.TotalMapInfo)
}

::google::protobuf::uint8* TotalMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.TotalMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .navit.protocol.map_info.MapInfo map_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_infos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .navit.protocol.map_info.MapConnectionInfo map_connection_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_connection_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->map_connection_infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.TotalMapInfo)
  return target;
}

size_t TotalMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.TotalMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .navit.protocol.map_info.MapInfo map_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_infos(static_cast<int>(i)));
    }
  }

  // repeated .navit.protocol.map_info.MapConnectionInfo map_connection_infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->map_connection_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_connection_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TotalMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.TotalMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TotalMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TotalMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.TotalMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.TotalMapInfo)
    MergeFrom(*source);
  }
}

void TotalMapInfo::MergeFrom(const TotalMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.TotalMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_infos_.MergeFrom(from.map_infos_);
  map_connection_infos_.MergeFrom(from.map_connection_infos_);
}

void TotalMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.TotalMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalMapInfo::CopyFrom(const TotalMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.TotalMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalMapInfo::IsInitialized() const {
  return true;
}

void TotalMapInfo::Swap(TotalMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TotalMapInfo::InternalSwap(TotalMapInfo* other) {
  using std::swap;
  CastToBase(&map_infos_)->InternalSwap(CastToBase(&other->map_infos_));
  CastToBase(&map_connection_infos_)->InternalSwap(CastToBase(&other->map_connection_infos_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TotalMapInfo::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ItemProperty::InitAsDefaultInstance() {
  ::navit::protocol::map_info::_ItemProperty_default_instance_._instance.get_mutable()->map_point_ = const_cast< ::navit::protocol::map_info::MapPoint*>(
      ::navit::protocol::map_info::MapPoint::internal_default_instance());
  ::navit::protocol::map_info::_ItemProperty_default_instance_._instance.get_mutable()->map_line_ = const_cast< ::navit::protocol::map_info::MapLine*>(
      ::navit::protocol::map_info::MapLine::internal_default_instance());
  ::navit::protocol::map_info::_ItemProperty_default_instance_._instance.get_mutable()->map_polygon_ = const_cast< ::navit::protocol::map_info::MapArea*>(
      ::navit::protocol::map_info::MapArea::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemProperty::kItemPropertyFieldNumber;
const int ItemProperty::kMapPointFieldNumber;
const int ItemProperty::kMapLineFieldNumber;
const int ItemProperty::kMapPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemProperty::ItemProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fnavit_5fmap_2eproto::scc_info_ItemProperty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:navit.protocol.map_info.ItemProperty)
}
ItemProperty::ItemProperty(const ItemProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_point()) {
    map_point_ = new ::navit::protocol::map_info::MapPoint(*from.map_point_);
  } else {
    map_point_ = NULL;
  }
  if (from.has_map_line()) {
    map_line_ = new ::navit::protocol::map_info::MapLine(*from.map_line_);
  } else {
    map_line_ = NULL;
  }
  if (from.has_map_polygon()) {
    map_polygon_ = new ::navit::protocol::map_info::MapArea(*from.map_polygon_);
  } else {
    map_polygon_ = NULL;
  }
  item_property_ = from.item_property_;
  // @@protoc_insertion_point(copy_constructor:navit.protocol.map_info.ItemProperty)
}

void ItemProperty::SharedCtor() {
  ::memset(&map_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_property_) -
      reinterpret_cast<char*>(&map_point_)) + sizeof(item_property_));
}

ItemProperty::~ItemProperty() {
  // @@protoc_insertion_point(destructor:navit.protocol.map_info.ItemProperty)
  SharedDtor();
}

void ItemProperty::SharedDtor() {
  if (this != internal_default_instance()) delete map_point_;
  if (this != internal_default_instance()) delete map_line_;
  if (this != internal_default_instance()) delete map_polygon_;
}

void ItemProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ItemProperty::descriptor() {
  ::protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemProperty& ItemProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fnavit_5fmap_2eproto::scc_info_ItemProperty.base);
  return *internal_default_instance();
}


void ItemProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:navit.protocol.map_info.ItemProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && map_point_ != NULL) {
    delete map_point_;
  }
  map_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_line_ != NULL) {
    delete map_line_;
  }
  map_line_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_polygon_ != NULL) {
    delete map_polygon_;
  }
  map_polygon_ = NULL;
  item_property_ = 0;
  _internal_metadata_.Clear();
}

bool ItemProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navit.protocol.map_info.ItemProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navit.protocol.map_info.ItemProperty.Propertiy item_property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item_property(static_cast< ::navit::protocol::map_info::ItemProperty_Propertiy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapPoint map_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapLine map_line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navit.protocol.map_info.MapArea map_polygon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navit.protocol.map_info.ItemProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navit.protocol.map_info.ItemProperty)
  return false;
#undef DO_
}

void ItemProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navit.protocol.map_info.ItemProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navit.protocol.map_info.ItemProperty.Propertiy item_property = 1;
  if (this->item_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->item_property(), output);
  }

  // .navit.protocol.map_info.MapPoint map_point = 2;
  if (this->has_map_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_map_point(), output);
  }

  // .navit.protocol.map_info.MapLine map_line = 3;
  if (this->has_map_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_map_line(), output);
  }

  // .navit.protocol.map_info.MapArea map_polygon = 4;
  if (this->has_map_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_map_polygon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navit.protocol.map_info.ItemProperty)
}

::google::protobuf::uint8* ItemProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navit.protocol.map_info.ItemProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navit.protocol.map_info.ItemProperty.Propertiy item_property = 1;
  if (this->item_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->item_property(), target);
  }

  // .navit.protocol.map_info.MapPoint map_point = 2;
  if (this->has_map_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_map_point(), deterministic, target);
  }

  // .navit.protocol.map_info.MapLine map_line = 3;
  if (this->has_map_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_map_line(), deterministic, target);
  }

  // .navit.protocol.map_info.MapArea map_polygon = 4;
  if (this->has_map_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_map_polygon(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navit.protocol.map_info.ItemProperty)
  return target;
}

size_t ItemProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navit.protocol.map_info.ItemProperty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .navit.protocol.map_info.MapPoint map_point = 2;
  if (this->has_map_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_point_);
  }

  // .navit.protocol.map_info.MapLine map_line = 3;
  if (this->has_map_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_line_);
  }

  // .navit.protocol.map_info.MapArea map_polygon = 4;
  if (this->has_map_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_polygon_);
  }

  // .navit.protocol.map_info.ItemProperty.Propertiy item_property = 1;
  if (this->item_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navit.protocol.map_info.ItemProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navit.protocol.map_info.ItemProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navit.protocol.map_info.ItemProperty)
    MergeFrom(*source);
  }
}

void ItemProperty::MergeFrom(const ItemProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navit.protocol.map_info.ItemProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_point()) {
    mutable_map_point()->::navit::protocol::map_info::MapPoint::MergeFrom(from.map_point());
  }
  if (from.has_map_line()) {
    mutable_map_line()->::navit::protocol::map_info::MapLine::MergeFrom(from.map_line());
  }
  if (from.has_map_polygon()) {
    mutable_map_polygon()->::navit::protocol::map_info::MapArea::MergeFrom(from.map_polygon());
  }
  if (from.item_property() != 0) {
    set_item_property(from.item_property());
  }
}

void ItemProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navit.protocol.map_info.ItemProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemProperty::CopyFrom(const ItemProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navit.protocol.map_info.ItemProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemProperty::IsInitialized() const {
  return true;
}

void ItemProperty::Swap(ItemProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemProperty::InternalSwap(ItemProperty* other) {
  using std::swap;
  swap(map_point_, other->map_point_);
  swap(map_line_, other->map_line_);
  swap(map_polygon_, other->map_polygon_);
  swap(item_property_, other->item_property_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ItemProperty::GetMetadata() const {
  protobuf_message_5fnavit_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fnavit_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map_info
}  // namespace protocol
}  // namespace navit
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::Property* Arena::CreateMaybeMessage< ::navit::protocol::map_info::Property >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::Property >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::Point* Arena::CreateMaybeMessage< ::navit::protocol::map_info::Point >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapBasicInfo* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapBasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapBasicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapPoint* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapPoint >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapLine* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapLine >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapLine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapArea* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapArea >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapInfo* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::MapConnectionInfo* Arena::CreateMaybeMessage< ::navit::protocol::map_info::MapConnectionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::MapConnectionInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::TotalMapInfo* Arena::CreateMaybeMessage< ::navit::protocol::map_info::TotalMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::TotalMapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::navit::protocol::map_info::ItemProperty* Arena::CreateMaybeMessage< ::navit::protocol::map_info::ItemProperty >(Arena* arena) {
  return Arena::CreateInternal< ::navit::protocol::map_info::ItemProperty >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
